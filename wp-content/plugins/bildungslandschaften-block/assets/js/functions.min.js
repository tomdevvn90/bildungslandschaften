// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"functions.js":[function(require,module,exports) {
'use strict';

jQuery(function ($) {
  const $wrap = $('.fancy-card-block');
  let rectF, rectL, $fancyItem, firstItem, lastItem;

  if ($wrap.length) {
    $fancyItem = $wrap.find('.fancy-card-item');
    firstItem = $fancyItem[0];
    lastItem = $fancyItem[$fancyItem.length - 1];
    rectF = firstItem.getBoundingClientRect();
    rectL = lastItem.getBoundingClientRect();
  }

  const FancyCardItemEvent = () => {
    if (!$wrap.length) {
      return;
    }

    const ww = window.innerWidth;
    const lF = rectF.left;
    const rF = rectF.right;
    const tL = rectL.right + 35 - ww; //rectL = lastItem.getBoundingClientRect();

    if (tL <= 0) {
      return;
    }

    [...$fancyItem].forEach((e, i) => {
      const rect = e.getBoundingClientRect();

      if (i === 0) {
        return;
      }

      $(e).css('transform', "translate3d(calc(120px * var(--item) - 120px - (".concat(tL, "px * var(--item))), calc(150px * var(--item) - 150px), 0)")); // if ( rect.left <= lF ) {
      // 	$( e ).css( 'transform', 'translate3d(0px, calc(150px * var(--item) - 150px), 0)' );
      // } else if (ww>=firstItem.offsetWidth *1.3) {
      //
      // }
    });
  };

  const FancyCard = () => {
    if (!$wrap.length) {
      return;
    }

    $fancyItem = $wrap.find('.fancy-card-item');
    $fancyItem.on('click', function (e) {
      e.preventDefault();
      $(this).toggleClass('__active').siblings().removeClass('__active');
      $fancyItem.css({
        transform: '',
        width: ''
      });

      if ($(this).hasClass('__active')) {
        $fancyItem.css({
          transform: 'translate3d(0px, calc(150px * var(--item) - 150px), 0)'
        });
        $(this).css('width', '100%');
      }
    });
    $fancyItem.on('mouseenter', e => {
      e.preventDefault();
      $wrap.find('.fancy-cards-wrap').addClass('__hover');
    });
    $fancyItem.on('mouseleave', e => {
      e.preventDefault();
      $wrap.find('.fancy-cards-wrap').removeClass('__hover');
    });
  };

  const setHForFancyCardWrap = () => {
    const $wrapF = $('.fancy-card-block');

    if (!$wrapF.length) {
      return;
    }

    const $items = $wrapF.find('.fancy-card-item');
    $wrapF.css('min-height', ($items.length - 1) * 150 + 500);
  };

  const MapSelector = () => {
    const $wrap = $('.bild-map-selector-block'),
          $btnMapSelectorWrap = $wrap.find('.btn-info-map-selector'),
          $btnMapSelector = $btnMapSelectorWrap.find('.bild-btn'),
          $btnMapSelectorTextWrap = $btnMapSelectorWrap.find('.bild-btn-text'),
          $selectorsPointer = $wrap.find('.pointer-selectors'),
          $selectorsPointerItem = $selectorsPointer.find('.__pointer'),
          $selectorsPointerItemFirst = $selectorsPointer.find('.__pointer');

    if (!$selectorsPointerItem.length) {
      $btnMapSelectorWrap.hide();
    }

    const dataFirstItem = $selectorsPointerItemFirst.data('map');
    $btnMapSelectorTextWrap.text(dataFirstItem.title);
    $btnMapSelector.attr('href', dataFirstItem.link);
    $selectorsPointerItem.on('mouseenter click', function (e) {
      e.preventDefault();
      const data = $(this).data('map');
      $btnMapSelectorTextWrap.text(data.title);
      $btnMapSelector.attr('href', data.link);
    });
  };

  const SliderContainer = () => {
    $('[data-slider-container]').each(function () {
      const $self = $(this);
      const $slideWrap = $self.find('.inner-wrap');
      let opt = $self.data('slider-container');
      const b992 = $self.data('breakpoint-tablet');
      const b576 = $self.data('breakpoint-mobile');
      const arrowStyle = $self.data('arrow-style');
      const optDefault = {
        slidesToShow: 1,
        slidesToScroll: 1,
        dots: true,
        arrows: true,
        infinite: true,
        fade: true,
        adaptiveHeight: true,
        variableWidth: true,
        responsive: [{
          breakpoint: 992,
          settings: {
            slidesToShow: b992 || 2,
            slidesToScroll: b992 || 2
          }
        }, {
          breakpoint: 576,
          settings: {
            slidesToShow: b576 || 1,
            slidesToScroll: b576 || 1
          }
        }]
      };
      optDefault.nextArrow = '<button class="slick-next slick-arrow" aria-label="Next" type="button">Next <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path fill="currentColor" d="M96 480c-8.188 0-16.38-3.125-22.62-9.375c-12.5-12.5-12.5-32.75 0-45.25L242.8 256L73.38 86.63c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l192 192c12.5 12.5 12.5 32.75 0 45.25l-192 192C112.4 476.9 104.2 480 96 480z"/></svg></button>';
      optDefault.prevArrow = '<button class="slick-prev slick-arrow" aria-label="Previous" type="button">Previous <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><path fill="currentColor" d="M192 448c-8.188 0-16.38-3.125-22.62-9.375l-160-160c-12.5-12.5-12.5-32.75 0-45.25l160-160c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25L77.25 256l137.4 137.4c12.5 12.5 12.5 32.75 0 45.25C208.4 444.9 200.2 448 192 448z"/></svg></button>';

      if (arrowStyle === 'style-1') {
        optDefault.nextArrow = '<span class="custom-slick-arrow next-a"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 19 13"><path fill="currentColor" d="M18.1 6.45 2.92 0l1.64 4.4L0 6.45 4.55 8.5l-1.64 4.4 15.2-6.45Z"/></svg></span>';
        optDefault.prevArrow = '<span class="custom-slick-arrow prev-a"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 19 13"><path fill="currentColor" d="M18.1 6.45 2.92 0l1.64 4.4L0 6.45 4.55 8.5l-1.64 4.4 15.2-6.45Z"/></svg></span>';
      }

      opt = Object.assign({}, optDefault, opt);
      $slideWrap.slick(opt);
    });
  };

  $(window).on('load', function () {
    setHForFancyCardWrap();
    FancyCardItemEvent();
  });
  $(window).on('resize', function () {
    setHForFancyCardWrap();
    FancyCardItemEvent();
  });
  $(document).ready(function () {
    FancyCard();
    MapSelector();
    SliderContainer();
  });
});
},{}],"../../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "53051" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","functions.js"], null)